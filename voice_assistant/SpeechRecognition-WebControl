import speech_recognition as sr  # Importing the speech recognition library
import pyttsx3  # Importing the text-to-speech library
import datetime  # Importing the datetime module to get the current time
import webbrowser  # Importing the webbrowser module to open websites

# Initialize the pyttsx3 engine
engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')

# Set the voice property of the engine
engine.setProperty('voice',voices[1].id)

# Function to speak out the given text
def say(text):
    engine.say(text)
    engine.runAndWait()

# Function to greet the user based on the time of day
def greeter():
    hour=int(datetime.datetime.now().hour)

    if hour>=0 and hour<12:
        say("Good morning")
    elif hour>=12 and hour<18:
        say("Good Afternoon")
    else:
        say("Good Evening")
    say("I am your helper. How can I help you?")

# Function to assign a task to the assistant
def taskAssigning():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening")
        r.pause_threshold = 0.6
        audio = r.listen(source)
    try:
        task = r.recognize_google(audio, language='en-in')
        print("Recognising")
        print(f"User:{task}\n")
    except Exception as e:
        say("Please can you repeat sir!!")
        return "None"
    return task

# List of websites and their URLs
sites = [["youtube","youtube.com"],["google","google.com"],
["wikipedia","wikipedia.com"],["AERP login","youtube.com"],
["github","github.com"],["instagram","instagram.com"],
["linked in","linkedin.com"],["riplet","riplet.com"],
["online compiler","Online compiler"],["linkedin","linkedin.com"]]

# Function to solve the task assigned by the user
def taskSolver(task):
    for site in sites:
        if (f"open {site[0]}") in task.lower():
            webbrowser.open(site[1])
        elif (f"search") in task.lower():
            webbrowser.open(task)

# Main function
if __name__ == "__main__":
    greeter()  # Greet the user
    task = taskAssigning().lower()  # Assign a task
    taskSolver(task)  # Solve the task
